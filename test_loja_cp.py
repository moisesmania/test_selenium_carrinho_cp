# Generated by Selenium IDE
import pytest
from selenium import webdriver  # Importa o WebDriver do Selenium para interagir com o navegador
from selenium.webdriver.common.by import By  # Importa o módulo para localizar elementos na página
from selenium.webdriver.common.action_chains import ActionChains  # Importa o módulo para realizar ações complexas com o navegador
from selenium.webdriver.support import expected_conditions  # Importa o módulo para condições esperadas em esperas explícitas
from selenium.webdriver.support.wait import WebDriverWait  # Importa o módulo para implementar esperas explícitas
from selenium.webdriver.common.keys import Keys  # Importa o módulo para simular a digitação de teclas
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities  # Importa o módulo para definir capacidades desejadas do navegador

class TestTestlojapc:
    def setup_method(self, method):
        """
        Método executado antes de cada método de teste.
        Configura o ambiente do WebDriver.
        """
        # Inicializa o WebDriver para o Chrome
        self.driver = webdriver.Chrome()
        # Inicializa um dicionário para armazenar variáveis que podem ser usadas durante o teste
        self.vars = {}
  
    def teardown_method(self, method):
        """
        Método executado após cada método de teste.
        Garante que o navegador seja fechado corretamente.
        """
        # Fecha o navegador e encerra a sessão do WebDriver
        self.driver.quit()
  
    def test_testlojapc(self):
        """
        Método de teste que realiza ações na página web e verifica comportamentos.
        """
        # Navega para a URL fornecida
        self.driver.get("https://rocketz.com.br/pc-gamer")
        
        # Define o tamanho da janela do navegador
        self.driver.set_window_size(1382, 744)
        
        # Interage com a página:
        # Localiza e clica no elemento especificado pelo seletor CSS
        self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(2) > .py-custom").click()
        # Clica novamente no mesmo elemento (parece redundante)
        self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(2) > .py-custom").click()
        # Localiza e clica no botão especificado pelo seletor CSS
        self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(2) .btn").click()
        # Localiza e clica no elemento especificado pelo seletor CSS
        self.driver.find_element(By.CSS_SELECTOR, ".btn-light > span").click()
    
if __name__ == "__main__":
    """
    Executa os testes usando pytest se o script for executado diretamente.
    """
    pytest.main()
